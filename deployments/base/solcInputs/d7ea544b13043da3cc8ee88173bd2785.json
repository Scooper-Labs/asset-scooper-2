{
  "language": "Solidity",
  "sources": {
    "contracts/AssetScooper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n// Import necessary contracts from Uniswap\nimport './Interfaces/IUniswapV2Pair.sol';\nimport './Lib/UniswapV2Library.sol';\nimport './Lib/TransferHelper.sol';\nimport 'solady/src/utils/ReentrancyGuard.sol';\n\n  \ncontract AssetScooper is ReentrancyGuard {\n\n    address private immutable i_owner;\n\n    string private constant i_version = \"1.0.0\";\n\n    bytes4 private constant interfaceId = 0x01ffc9a7;\n\n    address private constant weth = 0x4200000000000000000000000000000000000006;\n\n    address private constant factory = 0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6;\n\n    event TokenSwapped(address indexed tokenA,address indexed tokenB, uint256 amountIn, uint amountOut);\n    \n    error AssetScooper__AddressZero();\n    error AssetScooper__MisMatchToken();\n    error AssetScooper__ZeroLengthArray();\n    error AssetScooper__UnsupportedToken();\n    error AssetScooper__InsufficientOutputAmount();\n    error AssetScooper__InsufficientLiquidity();\n    error AssetScooper__UnsuccessfulBalanceCall();\n    error AssetScooper__UnsuccessfulDecimalCall();\n    error AssetScooper_PairDoesNotExist();\n    error AssetScooper__InsufficientBalance();\n    error AssetScooper__MisMatchLength();\n    error AssetScooper__UnsuccessfulSwapTx();\n\n    constructor() {\n        i_owner = msg.sender;\n    }\n\n    function owner() public view returns (address) {\n        return i_owner;\n    }\n\n    function version() public pure returns (string memory) {\n        return i_version;\n    }\n\n    function _checkIfERC20Token(address tokenAddress) internal view returns (bool) {\n        (bool success, bytes memory data) = tokenAddress.staticcall(abi.encodeWithSignature(\"supportsInterface(bytes4)\", interfaceId));\n        if(!success) revert AssetScooper__UnsupportedToken();\n        return abi.decode(data, (bool));\n    }\n\n    function _checkIfPairExists(address _factory, address tokenAddress) internal pure returns (bool) {\n        address pairAddress = UniswapV2Library.pairFor(_factory, tokenAddress, weth);\n        return pairAddress != address(0);\n    }\n\n    function _getAmountIn(address token, uint256 tokenBalance) internal view returns (uint256 amountIn) {\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\"decimals()\"));\n        if(!success) revert AssetScooper__UnsuccessfulDecimalCall();\n        uint256 tokenDecimals = abi.decode(data, (uint256));\n        amountIn = (tokenBalance * (10 ** (18 - tokenDecimals))) / 1;\n    }\n\n    function _getTokenBalance(address token, address _owner) internal view returns (uint256 tokenBalance) {\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\"balanceOf(address)\", _owner));\n        if(!success) revert AssetScooper__UnsuccessfulBalanceCall();\n        tokenBalance = abi.decode(data, (uint256));\n    }\n\n    function sweepTokens(address[] calldata tokenAddress, uint256[] calldata minAmountOut) public nonReentrant {\n        if(tokenAddress.length == 0) revert AssetScooper__ZeroLengthArray();\n        if(msg.sender == address(0)) revert AssetScooper__AddressZero();\n        if(tokenAddress.length != minAmountOut.length) revert AssetScooper__MisMatchLength();\n\n        address tokenAddr;\n        uint256 minimumOutputAmount;\n        uint256 totalEth;\n\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\n            tokenAddr = tokenAddress[i];\n            minimumOutputAmount = minAmountOut[i];\n\n            address pairAddress = UniswapV2Library.pairFor(factory, tokenAddr, weth);\n\n            totalEth += _swap(pairAddress, minimumOutputAmount);\n        }\n\n        TransferHelper.safeTransferETH(msg.sender, totalEth);\n    }\n\n    function _swap(address pairAddress, uint256 minimumOutputAmount) internal nonReentrant returns(uint256 amountOut) {\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\n\n        address tokenA = pair.token0();\n        address tokenB = pair.token1();\n\n        if((tokenA == address(0)) && (tokenB == address(0))) revert AssetScooper__AddressZero();\n        if((tokenA == weth) && (tokenB == tokenA)) revert AssetScooper__MisMatchToken();\n\n        if(!_checkIfERC20Token(tokenA)) revert AssetScooper__UnsupportedToken();\n        if(!_checkIfPairExists(pair.factory(), tokenA)) revert AssetScooper_PairDoesNotExist();\n\n        uint256 tokenBalance = _getTokenBalance(tokenA, msg.sender);\n\n        if (tokenBalance < 0) revert AssetScooper__InsufficientBalance();\n\n        uint256 amountIn = _getAmountIn(tokenA, tokenBalance);\n\n        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(pair.factory(), tokenA, tokenB);\n\n        uint256 pairBalanceA = _getTokenBalance(tokenA, pairAddress);\n        uint256 pairBalanceB = _getTokenBalance(tokenB, pairAddress);\n\n        if (pairBalanceB > pairBalanceA) {\n            amountOut = UniswapV2Library.getAmountOut(amountIn, reserveA, reserveB);\n        }\n        \n        if(amountOut < minimumOutputAmount) revert AssetScooper__InsufficientOutputAmount();\n\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pairAddress, amountIn);\n\n        if (pairBalanceB > pairBalanceA) {\n            pair.swap(0, amountOut, address(this), new bytes(0));\n        }\n\n        emit TokenSwapped(tokenA, tokenB, amountIn, amountOut);\n\n    }\n\n}"
    },
    "contracts/Interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/Lib/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.8.20;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "contracts/Lib/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "contracts/Lib/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport '../Interfaces/IUniswapV2Pair.sol';\nimport '../Lib/SafeMath.sol';\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            )))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n    \n}\n"
    },
    "solady/src/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Reentrancy guard mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Unauthorized reentrant call.\n    error Reentrancy();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Equivalent to: `uint72(bytes9(keccak256(\"_REENTRANCY_GUARD_SLOT\")))`.\n    /// 9 bytes is large enough to avoid collisions with lower slots,\n    /// but not too large to result in excessive bytecode bloat.\n    uint256 private constant _REENTRANCY_GUARD_SLOT = 0x929eee149b4bd21268;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      REENTRANCY GUARD                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Guards a function from reentrancy.\n    modifier nonReentrant() virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if eq(sload(_REENTRANCY_GUARD_SLOT), address()) {\n                mstore(0x00, 0xab143c06) // `Reentrancy()`.\n                revert(0x1c, 0x04)\n            }\n            sstore(_REENTRANCY_GUARD_SLOT, address())\n        }\n        _;\n        /// @solidity memory-safe-assembly\n        assembly {\n            sstore(_REENTRANCY_GUARD_SLOT, codesize())\n        }\n    }\n\n    /// @dev Guards a view function from read-only reentrancy.\n    modifier nonReadReentrant() virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if eq(sload(_REENTRANCY_GUARD_SLOT), address()) {\n                mstore(0x00, 0xab143c06) // `Reentrancy()`.\n                revert(0x1c, 0x04)\n            }\n        }\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}